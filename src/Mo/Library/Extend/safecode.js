/*
** File: safecode.js
** Usage: a method to create safecode.Use 0-9a-zA-Z.
** About: 
**		support@mae.im
*/

function $safecode(sessionKey,opt){
	var cfg = {
		length : 4,
		odd : 0,
		padding : 0,
		data : "",
		size:10
	};
	F.extend(cfg,opt||{});
	function getrndcolor(){
		return [F.random(0,128),F.random(64,128),F.random(0,128)];
	}
	Response.Buffer = true;
	Response.Expires = -1;
	Response.AddHeader("Pragma", "no-cache");
	Response.AddHeader("cache-ctrol", "no-cache");
	Response.ContentType = "Image/bmp";
	var I, ii, iii,cCode="0123456789aAcCeEmMnNrRsSuUvVwWxXzZjJbBdDfFhHkKtTgGpPqQyY＋－×÷＝+-/= .",bgColor=[0xff,0xff,0xff],vNumberData=[],vCode=[], vCodes="";
	vNumberData.push("1110001111110111011111011101111101110111110111011111011101111101110111110111011111100011111111111111");
	vNumberData.push("1111011111111001111111110111111111011111111101111111110111111111011111111101111111100011111111111111");
	vNumberData.push("1110001111110111011111011101111111110111111110111111110111111110111111110111111111000001111111111111");
	vNumberData.push("1110001111110111011111111101111111001111111111011111111101111111110111110111011111100011111111111111");
	vNumberData.push("1111101111111100111111101011111101101111110110111110111011111100001111111110111111110001111111111111");
	vNumberData.push("1100000111110111111111011111111100001111110111011111111101111101110111110111011111100011111111111111");
	vNumberData.push("1111000111111011011111011111111101001111110011011111011101111101110111110111011111100011111111111111");
	vNumberData.push("1100000111110110111111111011111111101111111101111111110111111111011111111101111111110111111111111111");
	vNumberData.push("1110001111110111011111011101111110101111111000111111011101111101110111110111011111100011111111111111");
	vNumberData.push("1110001111110111011111011101111101110111110110011111100101111111110111110110111111000111111111111111");
	vNumberData.push("1111111111111111111111100011111101110111111100011111101101111101110111111000001111111111111111111111");
	vNumberData.push("1111011111111101111111101011111110101111111010111111100011111101110111110111011110001000111111111111");
	vNumberData.push("1111111111111111111111100001111101110111110111111111011111111101110111111000111111111111111111111111");
	vNumberData.push("1110000111110111011110111111111011111111101111111110111111111011111111110111011111100011111111111111");
	vNumberData.push("1111111111111111111111100011111101110111110000011111011111111101110111111000111111111111111111111111");
	vNumberData.push("1000000111110111011111011111111101101111110000111111011011111101111111110111011110000001111111111111");
	vNumberData.push("1111111111111111111110000011111101010111110101011111010101111101010111100101001111111111111111111111");
	vNumberData.push("1000100011110010011111001001111100100111110101011111010101111101010111110101011110010100111111111111");
	vNumberData.push("1111111111111111111110010011111100110111110111011111011101111101110111100011001111111111111111111111");
	vNumberData.push("1000100011110011011111001101111101010111110101011111010101111101100111110110011110001101111111111111");
	vNumberData.push("1111111111111111111111001001111110011111111011111111101111111110111111110000111111111111111111111111");
	vNumberData.push("1000001111110111011111011101111100001111110101111111011011111101101111110111011110001100111111111111");
	vNumberData.push("1111111111111111111111100001111101110111111001111111111011111101110111110000111111111111111111111111");
	vNumberData.push("1110000111110111011111011111111110111111111100111111111101111111110111110111011111000011111111111111");
	vNumberData.push("1111111111111111111110011001111101110111110111011111011101111101110111111000001111111111111111111111");
	vNumberData.push("1000100011110111011111011101111101110111110111011111011101111101110111110111011111100011111111111111");
	vNumberData.push("1111111111111111111110001000111101110111110111011111101011111110101111111101111111111111111111111111");
	vNumberData.push("1000100011110111011111011101111110101111111010111111101011111110101111111101111111110111111111111111");
	vNumberData.push("1111111111111111111110010100111101010111110101011111010101111110101111111010111111111111111111111111");
	vNumberData.push("1001010011110101011111010101111101010111110101011111001001111110101111111010111111101011111111111111");
	vNumberData.push("1111111111111111111110010001111101101111111001111111100111111101101111100010011111111111111111111111");
	vNumberData.push("1001000111110110111111011011111110011111111001111111100111111101101111110110111110001001111111111111");
	vNumberData.push("1111111111111111111111000001111101101111111101111111110111111110110111110000011111111111111111111111");
	vNumberData.push("1100000111110110111111111011111111011111111101111111110111111110111111111011011111000001111111111111");
	vNumberData.push("1111111111111111111111100011111111101111111110111111111011111111101111111110111111111011111100011111");
	vNumberData.push("1100000111111101111111110111111111011111111101111111110111111111011111111101111110110111111000111111");
	vNumberData.push("1001111111110111111111011111111100001111110111011111011101111101110111110111011111000011111111111111");
	vNumberData.push("1000001111110111011111011101111100001111110111011111011101111101110111110111011110000011111111111111");
	vNumberData.push("1111100111111111011111111101111110000111110111011111011101111101110111110111011111100000111111111111");
	vNumberData.push("1000011111110110111111011101111101110111110111011111011101111101110111110110111110000111111111111111");
	vNumberData.push("1111000111111011011111101111111000001111111011111111101111111110111111111011111111000011111111111111");
	vNumberData.push("1000000111110111011111011111111101101111110000111111011011111101111111110111111110001111111111111111");
	vNumberData.push("1001111111110111111111011111111101001111110011011111011101111101110111110111011110001100111111111111");
	vNumberData.push("1000100011110111011111011101111101110111110000011111011101111101110111110111011110001000111111111111");
	vNumberData.push("1001111111110111111111011111111101000111110110111111010111111100011111110110111110001001111111111111");
	vNumberData.push("1000100111110110111111010111111100111111110001111111010111111101101111110110111110001001111111111111");
	vNumberData.push("1111111111111011111111101111111000001111111011111111101111111110111111111011111111110011111111111111");
	vNumberData.push("1100000111110101011111110111111111011111111101111111110111111111011111111101111111100011111111111111");
	vNumberData.push("1111111111111000011111011011111101101111111001111111011111111100001111110111011111100011111111111111");
	vNumberData.push("1110001111110110111110111111111011111111101111111110110001111011101111110110111111100111111111111111");
	vNumberData.push("1111111111100000111111011101111101110111110111011111011101111100001111110111111110001111111111111111");
	vNumberData.push("1000001111110111011111011101111101110111110000111111011111111101111111110111111110001111111111111111");
	vNumberData.push("1111111111111000011111011101111101110111110111011111011101111110000111111111011111111000111111111111");
	vNumberData.push("1110011111110110111110111101111011110111101111011110111101111010010111110110111111100011111111100111");
	vNumberData.push("1111111111100010001111011101111110101111111010111111110111111111011111111011111110001111111111111111");
	vNumberData.push("1000100011110111011111101011111110101111111101111111110111111111011111111101111111100011111111111111");
	vNumberData.push("1111111111111111011111111101111111110111111000000011111101111111110111111111011111111111111111111111");
	vNumberData.push("1111111111111111111111111111111111111111111000000111111111111111111111111111111111111111111111111111");
	vNumberData.push("1111111111111011111011110111011111101011111111011111111010111111011101111011111011111111111111111111");
	vNumberData.push("1111111111111110011111111001111111111111110000000011111111111111100111111110011111111111111111111111");
	vNumberData.push("1111111111111111111111111111111110000000111111111111100000001111111111111111111111111111111111111111");
	vNumberData.push("1111111111111110111111111011111111101111110000000111111011111111101111111110111111111111111111111111");
	vNumberData.push("1111111111111111111111111111111111111111110000001111111111111111111111111111111111111111111111111111");
	vNumberData.push("1111110111111111011111111011111111101111111101111111110111111110111111111011111111011111111101111111");
	vNumberData.push("1111111111111111111111111111111100000011111111111111111111111100000011111111111111111111111111111111");
	vNumberData.push("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
	vNumberData.push("1111111111111111111111111111111111111111111111111111111111111111111111111001111111100111111111111111");

	if(cfg.data==""){
		for(var i=0;i<=cfg.length-1;i++){
			vCode.push(F.random(0,55));
			vCodes += cCode.substr(vCode[vCode.length-1],1);
		}
	}else{
		cfg.length = cfg.data.length;
		vCodes = cfg.data;
		for(var i=0;i<=cfg.length-1;i++){
			vCode.push(cCode.indexOf(vCodes.substr(i,1)));
		}
	}
	F.session(sessionKey,vCodes);
	var padding = cfg.padding,
		image = bmpImage(cfg.length * cfg.size + padding*2,cfg.size + padding*2),
		header = byteArrayOutputStream(),
		padzero = image.writeHeader(header);
	var byt=[];
	if(padzero>0){
		for(var i=0;i<padzero;i++) byt.push(0);
	}
	var output=header.toByteArray();
	for(var i=(cfg.size-1)+padding*2;i>=0;i--){
		for(var ii=0;ii<=cfg.length-1;ii++){
			if(ii==0){
				for(var m=0;m<padding;m++){
					ArrayPush(output,bgColor);
				}
			}
			for(var iii=0;iii<cfg.size;iii++){
				if(F.random(1,100) < cfg.odd){
					ArrayPush(output,getrndcolor());
				}else{
					if(i>=padding && i<cfg.size+padding && vNumberData[vCode[ii]].substr((i-padding) * cfg.size + iii, 1) == "0"){
						ArrayPush(output,getrndcolor());
					}else{
						ArrayPush(output,bgColor);
					}
				}
			}
			if(ii==cfg.length-1){
				for(var m=0;m<padding;m++){
					ArrayPush(output,bgColor);
				}
			}
		}
		ArrayPush(output,byt);
	}
	F.echo(F.base64.toBinary(F.base64.e(output)),F.TEXT.BIN);
}
var ArrayPush = function(src,data){
	for(var i=0;i<data.length;i++) src.push(data[i]);
};
//=====================================================================
// GIF Support etc.
//
//---------------------------------------------------------------------
// byteArrayOutputStream
//---------------------------------------------------------------------
var byteArrayOutputStream = function() {
	var _bytes = new Array();
	var _this = {};
	_this.writeByte = function(b) {
		_bytes.push(b & 0xff);
	};
	_this.writeShort = function(i) {
		_this.writeByte(i);
		_this.writeByte(i >>> 8);
	};
	_this.writeLong = function(i) {
		_this.writeByte(i);
		_this.writeByte(i >>> 8);
		_this.writeByte(i >>> 16);
		_this.writeByte(i >>> 24);
	};
	_this.writeRGB = function(i) {
		_this.writeByte(i);
		_this.writeByte(i >>> 8);
		_this.writeByte(i >>> 16);
	};
	_this.writeBytes = function(b, off, len) {
		off = off || 0;
		len = len || b.length;
		for (var i = 0; i < len; i += 1) {
			_this.writeByte(b[i + off]);
		}
	};
	_this.writeString = function(s) {
		for (var i = 0; i < s.length; i += 1) {
			_this.writeByte(s.charCodeAt(i) );
		}
	};
	_this.toByteArray = function() {
		return _bytes;
	};
	return _this;
};
//---------------------------------------------------------------------
// bmpImage (B/W)
//---------------------------------------------------------------------
var bmpImage = function(width,height){
	var _width = width;
	var _height = height;
	var _data = new Array(width * height);
	var _this = {};
	_this.setPixel = function(x, y, pixel) {
		_data[y * _width + x] = pixel;
	};
	_this.writeHeader = function(out) {
		out.writeString("BM");
		var pixWidth = ((((_width * 24) + 31) & ~31) / 8);
		var biSizeImage = pixWidth * _height;
		out.writeLong(biSizeImage+54);
		out.writeBytes([0,0,0,0,54,0,0,0,40,0,0,0]);
		out.writeLong(_width);
		out.writeLong(_height);
		out.writeBytes([1,0,24,0,0,0,0,0]);
		out.writeLong(biSizeImage);
		out.writeBytes([18,11,0,0,18,11,0,0,0,0,0,0,0,0,0,0]);
		return pixWidth - _width *3;
	};
	_this.write = function(out) {
		var pixWidth = _this.writeHeader(out);
		var byt=[];
		for(var i=0; i< pixWidth-_width*3; i++) byt.push(0);
		for(var i=_height-1;i>=0;i--){
			for(var j=0;j<_width;j++){
				if(_data[i*_width+j]==0){
					out.writeRGB(0);
				}else{
					out.writeRGB(0xffffff);
				}
			}
			out.writeBytes(byt);
		}
	};
	return _this;
}
exports.safecode = $safecode;